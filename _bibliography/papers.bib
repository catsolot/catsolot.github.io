---
---
@inproceedings{10.1145/3672197.3673431,
    author = {Craun, Milo and Hussain, Khizar and Gautam, Uddhav and Ji, Zhengjie and Rao, Tanuj and Williams, Dan},
    title = {Eliminating eBPF Tracing Overhead on Untraced Processes},
    year = {2024},
    isbn = {9798400707124},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3672197.3673431},
    pdf = {https://doi.org/10.1145/3672197.3673431},
    doi = {10.1145/3672197.3673431},
    abstract = {Current eBPF-based kernel extensions affect entire systems, and are coarse-grained. For some use cases, like tracing, operators are more interested in tracing a subset of processes (e.g., belonging to a container) rather than all processes. While overhead from tracing is expected for targeted processes, we find untraced processes---those that are not the target of tracing---also incur performance overhead. To better understand this overhead, we identify and explore three techniques for per-process filtering for eBPF: post-eBPF, in-eBPF, and pre-eBPF filtering, finding that all three approaches result in excessive overhead on untraced processes. Finally, we propose a system that allows for zero-untraced-overhead per-process eBPF tracing by modifying kernel virtual memory mappings to present per-process kernel views, effectively enabling untraced processes to execute on the kernel as if no eBPF programs are attached.},
    booktitle = {Proceedings of the ACM SIGCOMM 2024 Workshop on EBPF and Kernel Extensions},
    pages = {16–22},
    numpages = {7},
    keywords = {copy-on-write, dynamic tracing, eBPF, tracing overhead},
    location = {Sydney, NSW, Australia},
    series = {eBPF '24},
    selected = {true}
}

@inproceedings{10.1145/3609021.3609299,
    author = {Craun, Milo and Oswald, Adam and Williams, Dan},
    title = {Enabling eBPF on Embedded Systems Through Decoupled Verification},
    year = {2023},
    isbn = {9798400702938},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3609021.3609299},
    pdf = {https://doi.org/10.1145/3609021.3609299},
    doi = {10.1145/3609021.3609299},
    abstract = {eBPF (Extended Berkeley Packet Filter) is a Linux kernel subsystem that aims to allow developers to write safe and efficient kernel extensions by employing an in-kernel verifier and just-in-time compiler (JIT). We find that verification is prohibitively expensive for resource-constrained embedded systems. To solve this we describe a system that allows for verification to occur outside of the embedded kernel and before BPF program load time. The in-kernel verifier and JIT are coupled so they must be decoupled together. A designated verifier kernel accepts a BPF program, then verifies, compiles, and signs a native precompiled executable. The executable can then be loaded onto an embedded device without needing the verifier and JIT on the embedded device. Decoupling verification and JIT from load-time opens the door to much more than running BPF programs on embedded devices. It allows larger and more expressive BPF programs to be verified, provides a way for new approaches to verification to be used without extensive kernel modification and creates the possibility for BPF program verification as a service.},
    booktitle = {Proceedings of the 1st Workshop on EBPF and Kernel Extensions},
    pages = {63–69},
    numpages = {7},
    keywords = {kernel extension, verification as a service, eBPF},
    location = {New York, NY, USA},
    series = {eBPF '23},
    selected = {true}
}

